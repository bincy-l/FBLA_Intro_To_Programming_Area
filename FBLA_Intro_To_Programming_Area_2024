'''
Author: Tanvi Khadse
Purpose: GPA Calculator
Date: 04/05/2024
'''


import tkinter as tk
from tkinter import VERTICAL, messagebox
from tkinter import Toplevel, ttk
import csv


#this function creates a help tab that informs users on how to use the Entry boxes
def display_help():

    help_tab = tk.Frame(notebook)
    notebook.add(help_tab, text="Help")

    heading_font = ('Helvetica', 14, 'bold')
    regular_font = ('Helvetica', 10, 'bold')
    wrap_length = 600

    tk.Label(help_tab, text="Current GPA", font=heading_font).grid(row=0, column=0, padx=10,  sticky="w")
    current_gpa_description = "This is where you may type in your current GPA and the amount of credits you've earned. It can make finding your new GPA much easier so that you only have to fill in a semester worth of information. If this is your first semester in high school, just put zeroes in all three boxes!"
    tk.Label(help_tab, text=current_gpa_description, font=regular_font, wraplength = wrap_length, justify='left').grid(row=1, column=0, padx=10, pady=5, sticky="w")

    tk.Label(help_tab, text="Previous Credits", font=heading_font).grid(row=2, column=0, padx=10, sticky="w")
    previous_credits_description = "First, type in the total amount of credits in your transcript. It cannot be negative or over 38, because that is the most credits a person can have. If you failed a course, make sure you don't count it towards your credits! "
    tk.Label(help_tab, text=previous_credits_description, font=regular_font, wraplength = wrap_length, justify='left').grid(row=3, column=0, padx=10,  sticky="w")

    current_gpa_examples_text_credits = 'Examples: "10", "15.5", "22"'
    tk.Label(help_tab, text=current_gpa_examples_text_credits, font=regular_font, wraplength = wrap_length, justify='left').grid(row=4, column=0, padx=10,  sticky="w")
    
    current_gpa_invalid_examples_text_credits = 'Invalid Inputs: "100", "-5", "39"'
    tk.Label(help_tab, text=current_gpa_invalid_examples_text_credits, font=regular_font, wraplength = wrap_length, justify='left').grid(row=5, column=0, padx=10,  sticky="w")


    tk.Label(help_tab, text="Current GPAs", font=heading_font).grid(row=6, column=0, padx=10, pady=5, sticky="w")
    current_gpas_description = "Next, enter your unweighted GPA and weighted GPA in the appropriate boxes. Your unweighed GPA will probably be the lower of the two, unless you've never taken an Honors course, where the two should be the same value. Your unweighted GPA cannot be negative or more than four. Your weighted GPA cannot be negative or more than five."
    tk.Label(help_tab, text=current_gpas_description, wraplength = wrap_length, font=regular_font, justify='left').grid(row=7, column=0, padx=10, pady=5, sticky="w")

    current_unweighted_gpa_valid_examples_text = 'Examples of valied unweighted GPAs: "1.5", "3.67", "4"'
    tk.Label(help_tab, text=current_unweighted_gpa_valid_examples_text, font=regular_font, wraplength = wrap_length, justify='left').grid(row=8, column=0, padx=10, pady=5, sticky="w")
    current_unweighted_gpa_valid_examples_text = 'Examples of invalid unweighted GPAs: "-2", "4.01", "5"'
    tk.Label(help_tab, text=current_unweighted_gpa_valid_examples_text, font=regular_font, wraplength = wrap_length, justify='left').grid(row=9, column=0, padx=10, pady=5, sticky="w")

    current_weighted_gpa_valid_examples_text = 'Examples of valied weighted GPAs: "2.35", "4", "5"'
    tk.Label(help_tab, text=current_unweighted_gpa_valid_examples_text, font=regular_font, wraplength = wrap_length, justify='left').grid(row=10, column=0, padx=10, pady=5, sticky="w")
    current_unweighted_gpa_valid_examples_text = 'Examples of invalid weighted GPAs: "-2", "5.01", "6"'
    tk.Label(help_tab, text=current_unweighted_gpa_valid_examples_text, font=regular_font, wraplength = wrap_length, justify='left').grid(row=11, column=0, padx=10, pady=5, sticky="w")

    
    tk.Label(help_tab, text="Course Name", wraplength = wrap_length, font=heading_font, justify='left').grid(row=12, column=0, padx=10, pady=5, sticky="w")

    course_name_description = 'The Course Name entry box is not required to fill out, it\'s just to help you keep track. Do not count your P.E. or Driver\'s Ed classes as courses! These are not included in GPA calculation.'
    tk.Label(help_tab, text=course_name_description, font=regular_font, wraplength = wrap_length, justify='left').grid(row=13, column=0, padx=10, pady=5, sticky="w")

    course_name_examples_text = 'Examples: "Biology", "Algebra", "Spanish"'
    tk.Label(help_tab, text=course_name_examples_text, font=regular_font, wraplength = wrap_length, justify='left').grid(row=14, column=0, padx=10, pady=5, sticky="w")

    tk.Label(help_tab, text="Grade", wraplength = wrap_length, font=heading_font, justify='left').grid(row=15, column=0, padx=10, pady=5, sticky="w")

    grade_description = 'The Grade entry box is for letter grades from A+ to F. It does not take percentages.'
    tk.Label(help_tab, text=grade_description, font=regular_font, wraplength = wrap_length, justify='left').grid(row=16, column=0, padx=10, pady=5, sticky="w")

    grade_examples_text = 'Examples: "A+", "D-", "F"'
    tk.Label(help_tab, text=grade_examples_text, font=regular_font, wraplength = wrap_length, justify='left').grid(row=17, column=0, padx=10, pady=5, sticky="w")

    grade_incorrect_examples_text = 'Invalid Inputs: "97", "E", "F-"'
    tk.Label(help_tab, text=grade_incorrect_examples_text, font=regular_font, wraplength = wrap_length, justify='left').grid(row=18, column=0, padx=10, pady=5, sticky="w")

    tk.Label(help_tab, text="Course Type", wraplength = wrap_length, font=heading_font, justify='left').grid(row=19, column=0, padx=10, pady=5, sticky="w")

    course_type_description = 'The Course Type drop box only accepts the four options given. If you type it out, make sure you spell it correctly!'
    tk.Label(help_tab, text=course_type_description, font=regular_font, wraplength = wrap_length, justify='left').grid(row=20, column=0, padx=10, pady=5, sticky="w")

    course_type_examples_text = 'Examples: "Regular", "Accelerated", "AP", "Dual Credit"'
    tk.Label(help_tab, text=course_type_examples_text, font=regular_font, wraplength = wrap_length, justify='left').grid(row=21, column=0, padx=10, pady=5, sticky="w")

    notebook.select(help_tab)


#this function saves data the user entered into a text document
def save_file():
    print ("Save File") 
    count = 0

    with open("gpacalc.gpac", "w") as file:
        # Write current GPA details (top line)
        file.write(f'{previous_credits.get()}|{current_unweighted_GPA.get()}|{current_weighted_GPA.get()}\n')
        # Write courses
        for semester in all_semesters:
            for course in semester:
                file.write(f'{count}|{course[0].get()}|{course[1].get()}|{course[2].get()}\n')

            count += 1

    messagebox.showinfo("Data Saved!", "Data Saved!")
    invalid_pic = tk.PhotoImage(file="sad.png")  
    window.iconphoto(True, invalid_pic)


#this function loads data from the text document into the entry boxes
def read_file():
    print("Reading file")
    detail = []
    semester_num = 0
    all_semesters = []
    with open("gpacalc.gpac", "r") as file:
        # Read current GPA details (top line)
        line = file.readline()
        header = line.split('|')
        previous_credits.delete(0,"end")
        previous_credits.insert(0,header[0])
        current_unweighted_GPA.delete(0,"end")
        current_unweighted_GPA.insert(0,header[1])
        current_weighted_GPA.delete(0,"end")
        current_weighted_GPA.insert(0,header[2])
        # Read courses
        #add_semester()
        for line in file:
            course = line.split('|')
            detail.append(course)
            # create new semester for the read semester number
            #if semester_num != int(course[0]):
            #    add_semester()

            # add course to current semeter
            #add_course()



    print (header)
    print (detail)        

    messagebox.showinfo("Data Loaded!", "Data Loaded!")
    #invalid_pic = tk.PhotoImage(file="sad.png")  
    #window.iconphoto(True, invalid_pic)


#checks if the user entered valid input. If not, it opens a popup box that tells the user it is invalid
def validation_check(input, acceptable_inputs, entry_box):
    for acceptable_input in acceptable_inputs:
        if input.lower() == acceptable_input.lower():
            return True  # returns True if the input is found in the list
    else:
        if input == "":
            input = "[no input]"
        invalid_statement = f'{input} is not a valid input for {entry_box}. Press the "Help" button a the top right to find out what is acceptable'
        messagebox.showinfo("Invalid Input", invalid_statement)
        invalid_pic = tk.PhotoImage(file="sad.png")  
        window.iconphoto(True, invalid_pic)
        return False  # returns False if the input is not found in the list

#checks if the user's input is in its acceptable range and also not an empty string. If not, it opens a popup that tells the user it is invalid.
def validation_check_for_numbers(input, lower_bound, upper_bound, entry_box):
    print (f'Input {input}')

    if input != "" and (float(input) >= lower_bound and float(input) <= upper_bound):
        return True #if the input is in an acceptable range it returns True.
    else:
        if input == "":
            invalid_statement = f'[no input] is not a valid input for {entry_box}. Press the "Help" button a the top right to find out what is acceptable'
            messagebox.showinfo("Invalid Input", invalid_statement)
            invalid_pic = tk.PhotoImage(file="sad.png")  
            window.iconphoto(True, invalid_pic)
            return False #returns False if the input was empty

        else:
            invalid_statement = f'{input} is not a valid input for {entry_box}. Press the "Help" button a the top right to find out what is acceptable'
        messagebox.showinfo("Invalid Input", invalid_statement)
        invalid_pic = tk.PhotoImage(file="sad.png")  
        window.iconphoto(True, invalid_pic)
        return False #returns False if the input was not in the correct range



#these variables keep track of how many courses and semesters there are
course_number = 1
semester_number = 0
#this variable is one more than what the last row used was so the next widget can go under it
last_row = 0

#creates the button variables so they can be used
add_course_button = None
add_semester_button = None
calculate_GPA_button = None

#these lists store information about the user's courses and semesters
semester_courses = []
all_semesters = []


#this functions adds another row of data entry boxes for course information each time the user click the "Add Course" button
def add_course():
    global course_number
    global semester_number
    global last_row
    global add_course_button
    global add_semester_button
    global calculate_GPA_button

#deletes Add Course, Add Semester, and Calculate GPA buttons so they can be replaced at the bottom.
    if add_course_button:
        add_course_button.destroy()
    if add_semester_button:
        add_semester_button.destroy()
    if calculate_GPA_button:
        calculate_GPA_button.destroy()

    print(f"Adding course {course_number} to semester {semester_number}")
    print(f"Sem course len: {len(semester_courses)}")

    #creates data entry boxes for course information
    tk.Label(course_information_tab, text="Course Name (optional)").grid(row=last_row, column=0, padx=10, pady=5, sticky="w")
    course_name = tk.Entry(course_information_tab)
    course_name.grid(row=last_row + 1, column=0, padx=10, pady=5, sticky="w")

    tk.Label(course_information_tab, text="Grade").grid(row=last_row, column=1, padx=10, pady=5, sticky="w")
    grade = tk.Entry(course_information_tab)
    grade.grid(row=last_row + 1, column=1, padx=10, pady=5)

    tk.Label(course_information_tab, text="Course Type").grid(row=last_row, column=2, padx=10, pady=10, sticky="w")
    course_type = ttk.Combobox(course_information_tab, values=("Regular", "Accelerated", "AP", "Dual Credit"))
    course_type.grid(row=last_row + 1, column=2, padx=10, pady=5, sticky="w")

    #adds course information to a list
    course_info = [course_name, grade, course_type]
    semester_courses.append([course_name, grade, course_type])
    print(f"Sem couese len: {len(semester_courses)}")

    course_number += 1
    last_row += 2

#adds Add Course, Add Semester, and Calculate GPA buttons at the bottom.
    add_course_button = tk.Button(course_information_tab, text="Add Course", command=add_course)
    add_course_button.grid(row=last_row, column=0, pady=5, sticky="w")
    last_row += 1

    add_semester_button = tk.Button(course_information_tab, text="Add Semester", command=add_semester)
    add_semester_button.grid(row=last_row, column=0, pady=5, sticky="w")
    last_row += 1

    calculate_GPA_button = tk.Button(course_information_tab, text="Calculate GPA", command=display_gpa)
    calculate_GPA_button.grid(row=last_row, column=0, pady=5, sticky="w")
    last_row += 1

#This function creates a new semester that the user can add more courses under
def add_semester():
    global all_semesters
    global semester_number
    global last_row
    global add_course_button
    global add_semester_button 
    global calculate_GPA_button
    global semester_courses
    global course_number
    
    
    semester_courses = []
    semester_number += 1
    course_number = 1
    
    print(f"Items in all_semesters: {len(all_semesters)}")
    print(f"All semester lists: {all_semesters}")

    

    if add_course_button:
        add_course_button.destroy()
    if add_semester_button:
        add_semester_button.destroy()
    if calculate_GPA_button:
        calculate_GPA_button.destroy()

        

    tk.Label(course_information_tab, text=f"Semester {semester_number}", font=("Helvetica", 20, "bold")).grid(row=last_row, column=0, columnspan=4, padx=10, pady=10, sticky="w")
    last_row +=1

    

    add_course()

#adds the semester course list to all semesters
    all_semesters.append(semester_courses)
    
#This takes the input the user entered as a paramter and returns its gpa value from 0 to 4
def get_gpa_value(grade):
    if grade.upper() == "A+" or grade.upper() == "A" or grade.upper() == "A-":
        return 4.0
    
    elif grade.upper() == "B+":
        return 3.67

    elif grade.upper() == "B":
        return 3.33
            
    elif grade.upper() == "B-":
        return 3.0
            
    elif grade.upper() == "C+":
        return 2.67
            
    elif grade.upper() == "C":
        return 2.33
            
    elif grade.upper() == "C-":
        return 2.0
            
    elif grade.upper() == "D+":
        return 1.67
            
    elif grade.upper() == "D":
        return 1.33
            
    elif grade.upper() == "D-":
        return 1.0
            
    else:
        return 0.0

#validation checks the user's input and also displays the user's new GPA
def display_gpa():
    
    print("Display GPA function called")
#holds a boolean value so the computer knows whether or not to advance to the next step.
    keep_going = True

#these are added to as the lists are iterated through. They will be used to calculate the GPAs
    total_gpa_values = 0
    total_courses = 0
    total_accelerated_courses = 0
    print(f"Items in all_semesters: {len(all_semesters)}")

    for semester in all_semesters:
        for course in semester:
            print(f"Course {total_courses}") 

            #validation check for course information in each semester
            if not validation_check(course[1].get().upper(), ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-', 'F'], "Grade"):
                keep_going = False
            if not validation_check(course[2].get().title(), ['Regular', 'Accelerated', "AP", "Dual Credit"], "Course Type"):
                keep_going = False
            
            total_gpa_values += get_gpa_value(course[1].get())
            total_courses += 1

            print(course[2].get())
            if course[2].get().title() != "Regular":
                total_accelerated_courses += 1

#validation checks for the current GPA boxes.
    if validation_check_for_numbers(current_unweighted_GPA.get(), 0,4, "Current Unweighted GPA") == False:
        keep_going = False
    
    if validation_check_for_numbers(current_weighted_GPA.get(), 0,5, "Current Weighted GPA") == False:
        keep_going = False

    if validation_check_for_numbers(previous_credits.get(), 0, 38, "Previous Credits") == False:
        keep_going = False


#only continues if the data is valid

    if keep_going:
        heading_font = ('Helvetica',30, 'bold')
        subheading_font = ('Helvetica', 20, 'bold')
        regular_font = ('Helvetica', 14, 'bold')
        wrap_length = 600

        # creates a new tab for displaying GPA
        gpa_result_tab = ttk.Frame(notebook)
        notebook.add(gpa_result_tab, text="Your GPA Result")  

        print(f"Total GPA values: {total_gpa_values}")
        print(f"Total courses: {total_courses}")
        print(f"Total accelerated courses: {total_accelerated_courses}")
        

        #these will hold the real GPA values soon
        cumulative_unweighted_gpa = 0
        cumulative_weighted_gpa = 0


        #avoids the division by zero error 
        if total_courses == 0:
            cumulative_unweighted_gpa = 0
        else:
            
            cumulative_unweighted_gpa = total_gpa_values / total_courses
            
            cumulative_unweighted_gpa = round(cumulative_unweighted_gpa, 2)

        #avoids division by zero error
        if total_courses == 0:
            cumulative_weighted_gpa = 0
        else:
            cumulative_weighted_gpa = (total_gpa_values + total_accelerated_courses)/ total_courses
            cumulative_weighted_gpa = round(cumulative_weighted_gpa, 2)

        #varibals to caluclate the GPA
        new_credits = total_courses/2 #this is because each course in my school only gives you half a credit per semester of a class
        previous_credits_val = float(previous_credits.get())
        current_unweighted_GPA_val = float(current_unweighted_GPA.get())
        current_weighted_GPA_val = float(current_weighted_GPA.get())

        #calculates the unweighted GPA
        cumulative_unweighted_gpa = ((current_unweighted_GPA_val * previous_credits_val) + (cumulative_unweighted_gpa * new_credits))/ (previous_credits_val + new_credits)
        cumulative_unweighted_gpa = round(cumulative_unweighted_gpa,2)
        
        #calculates the unweighetd GPA
        cumulative_weighted_gpa = ((current_weighted_GPA_val * previous_credits_val) + (cumulative_weighted_gpa * new_credits))/ (previous_credits_val + new_credits)
        cumulative_weighted_gpa = round(cumulative_weighted_gpa, 2)

        describe_courses = ""
        semester_count = 1
        last_row = 5
        unknown_course_name_counter = 1
        course_name = ""

#First lines of unweighetd GPA report that display the old GPA and the new GPA
        tk.Label(gpa_result_tab, text="Your GPA Report:", font=heading_font).grid(row=0, column=0, padx=10, pady=5, sticky="w")
        tk.Label(gpa_result_tab, text=f"Unweighted:",font= subheading_font, wraplength = wrap_length, justify='left').grid(row=1, column=0, sticky="w")
        tk.Label(gpa_result_tab, text=f"Your old cumulative unweighted GPA was {float(current_unweighted_GPA.get())}.",font=regular_font, wraplength = wrap_length, justify='left' ).grid(row=2, column=0, padx=5, pady=5, sticky="w")
        tk.Label(gpa_result_tab, text=f"Your new cumulative unweighted GPA is {cumulative_unweighted_gpa}.",font=regular_font, wraplength = wrap_length, justify='left' ).grid(row=3, column=0, padx=5, pady=5, sticky="w")
        tk.Label(gpa_result_tab, text=f"Based On",font=regular_font, wraplength = wrap_length, justify='left' ).grid(row=4, column=0, padx=5, pady=5, sticky="w")

#Adds the course information that the user put in underneath the report
        for semester in all_semesters:
            tk.Label(gpa_result_tab, text=f"Semester:{semester_count}", font=regular_font).grid(row=last_row, column=0,  sticky="w")
            semester_count += 1
            last_row += 1
            for course in semester:
                if course[0].get() == "":
                    course_name = f"Course {unknown_course_name_counter}"
                    unknown_course_name_counter += 1
                else:
                    course_name = course[0].get().title()
                describe_courses = f"{course_name} -- {course[1].get().title()}"
                tk.Label(gpa_result_tab, text=describe_courses,font=regular_font, wraplength = wrap_length, justify='left' ).grid(row=last_row, column=0, padx=5, pady=5, sticky="w")
                last_row += 1

#First lines of weighted GPA report that display the old GPA and the new GPA

        tk.Label(gpa_result_tab, text=f"Weighted:",font= subheading_font, wraplength = wrap_length, justify='left').grid(row=last_row, column=0, sticky="w")
        last_row += 1
        tk.Label(gpa_result_tab, text=f"Your old cumulative weighted GPA was {float(current_weighted_GPA.get())}.",font=regular_font, wraplength = wrap_length, justify='left' ).grid(row=last_row, column=0, padx=5, pady=5, sticky="w")
        last_row += 1
        tk.Label(gpa_result_tab, text=f"Your new cumulative weighted GPA is {cumulative_weighted_gpa}.",font=regular_font, wraplength = wrap_length, justify='left' ).grid(row=last_row, column=0, padx=5, pady=5, sticky="w")
        last_row += 1
        tk.Label(gpa_result_tab, text=f"Based On",font=regular_font, wraplength = wrap_length, justify='left' ).grid(row=last_row, column=0, padx=5, pady=5, sticky="w")
        last_row += 1

#Adds the course information that the user put in underneath the report
        semester_count = 1
        for semester in all_semesters:
            tk.Label(gpa_result_tab, text=f"Semester:{semester_count}", font=regular_font).grid(row=last_row, column=0,  sticky="w")
            semester_count += 1
            last_row += 1
            for course in semester:
                if course[0].get() == "":
                    course_name = f"Course {unknown_course_name_counter}"
                    unknown_course_name_counter += 1
                else:
                    course_name = course[0].get().title()
                describe_courses = f"{course_name} -- {course[1].get().title()}, {course[2].get().title()}"
                tk.Label(gpa_result_tab, text=describe_courses,font=regular_font, wraplength = wrap_length, justify='left' ).grid(row=last_row, column=0, padx=5, pady=5, sticky="w")
                last_row += 1





        #puts your overall GPA in a text and adds it to the tab

        
        

        
        

        notebook.select(gpa_result_tab)


#Creates the main window 
window = tk.Tk()
window.title("GPA Calculator")
window.geometry('1000x800')
notebook = ttk.Notebook(window)


#creates a notebook for the tabs (course_information, help, and GPA) to go inside
course_information_tab = tk.Frame(notebook)
notebook.add(course_information_tab, text="Course Information")

#creates the help button at the top right
tk.Button(course_information_tab, text="Help", command=display_help).grid(row=0, column=4, padx=0, pady=0)
last_row += 1

#creates the save and load buttons next to the help button.
tk.Button(course_information_tab, text="Save File", command=save_file).grid(row=0, column=2, padx=0, pady=0, sticky="e")
tk.Button(course_information_tab, text="Load File", command=read_file).grid(row=0, column=3, padx=0, pady=0, sticky="e")
last_row += 1
last_row += 1

#creates the data entry boxes for the user's current GPAs and credits
tk.Label(course_information_tab, text="Previous Credits").grid(row=last_row, column=1, padx=10, pady=5, sticky="w")
tk.Label(course_information_tab, text="Unweighted").grid(row=last_row, column=2, padx=10, pady=5, sticky="w")
tk.Label(course_information_tab, text="Weighted").grid(row=last_row, column=3, padx=10, pady=5, sticky="w")
last_row += 1
tk.Label(course_information_tab, text="Current GPA").grid(row=last_row, column=0, padx=10, pady=5, sticky="w")
last_row += 1

previous_credits = tk.Entry(course_information_tab)
previous_credits.grid(row=last_row, column=1, padx=10, pady=5, sticky="w")

current_unweighted_GPA = tk.Entry(course_information_tab)
current_unweighted_GPA.grid(row=last_row, column=2, padx=10, pady=5, sticky="w")

current_weighted_GPA = tk.Entry(course_information_tab)
current_weighted_GPA.grid(row=last_row, column=3, padx=10, pady=5, sticky="w")
last_row += 1

last_row += 1

#adds the very first semester
add_semester()
#add_course()

notebook.pack(expand=True, fill='both')
window.mainloop()
